{"ast":null,"code":"import { REGISTER_PLAYER_SUCCESS, REGISTER_PLAYER_FAIL, FETCH_PLAYER_SUCCESS, FETCH_PLAYER_FAIL, SET_MESSAGE } from \"./types\";\nimport PlayerService from \"../services/player.service\";\nexport const createPlayer = (name, number, position, height, weight, header) => dispatch => {\n  return PlayerService.createPlayer(name, number, position, height, weight, header).then(response => {\n    dispatch({\n      type: REGISTER_PLAYER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_PLAYER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const getPlayersByTeamId = header => dispatch => {\n  console.log(\"ASDASDAS\");\n  return PlayerService.getPlayersByTeamId(header).then(response => {\n    dispatch({\n      type: FETCH_PLAYER_SUCCESS,\n      payload: {\n        players: [response.data]\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: FETCH_PLAYER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["/Users/antony.dobrenov/nodejs_projects/VolleyStats-WEB/frontend/src/actions/player.js"],"names":["REGISTER_PLAYER_SUCCESS","REGISTER_PLAYER_FAIL","FETCH_PLAYER_SUCCESS","FETCH_PLAYER_FAIL","SET_MESSAGE","PlayerService","createPlayer","name","number","position","height","weight","header","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","getPlayersByTeamId","console","log","players"],"mappings":"AAAA,SACEA,uBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,iBAJF,EAKEC,WALF,QAMO,SANP;AAOA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,IAD0B,EAE1BC,MAF0B,EAG1BC,QAH0B,EAI1BC,MAJ0B,EAK1BC,MAL0B,EAM1BC,MAN0B,KAOtBC,QAAD,IAAc;AACjB,SAAOR,aAAa,CAACC,YAAd,CACLC,IADK,EAELC,MAFK,EAGLC,QAHK,EAILC,MAJK,EAKLC,MALK,EAMLC,MANK,EAOLE,IAPK,CAQJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAIAa,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAnBI,EAoBJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAIAY,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GAtCI,CAAP;AAwCD,CAhDM;AAkDP,OAAO,MAAMC,kBAAkB,GAAIb,MAAD,IAAaC,QAAD,IAAc;AAC1Da,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAOtB,aAAa,CAACoB,kBAAd,CAAiCb,MAAjC,EAAyCE,IAAzC,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,oBADC;AAEPe,MAAAA,OAAO,EAAE;AAAEW,QAAAA,OAAO,EAAE,CAACb,QAAQ,CAACG,IAAV;AAAX;AAFF,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAbI,EAcJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAIAU,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GAhCI,CAAP;AAkCD,CApCM","sourcesContent":["import {\n  REGISTER_PLAYER_SUCCESS,\n  REGISTER_PLAYER_FAIL,\n  FETCH_PLAYER_SUCCESS,\n  FETCH_PLAYER_FAIL,\n  SET_MESSAGE,\n} from \"./types\";\nimport PlayerService from \"../services/player.service\";\n\nexport const createPlayer = (\n  name,\n  number,\n  position,\n  height,\n  weight,\n  header\n) => (dispatch) => {\n  return PlayerService.createPlayer(\n    name,\n    number,\n    position,\n    height,\n    weight,\n    header\n  ).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_PLAYER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_PLAYER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const getPlayersByTeamId = (header) => (dispatch) => {\n  console.log(\"ASDASDAS\");\n  return PlayerService.getPlayersByTeamId(header).then(\n    (response) => {\n      dispatch({\n        type: FETCH_PLAYER_SUCCESS,\n        payload: { players: [response.data] },\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: FETCH_PLAYER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}