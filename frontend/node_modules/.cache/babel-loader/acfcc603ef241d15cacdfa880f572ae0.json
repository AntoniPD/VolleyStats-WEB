{"ast":null,"code":"var _jsxFileName = \"/Users/antony.dobrenov/nodejs_projects/VolleyStats-WEB/frontend/src/components/register.component.js\";\n// import React, { Component } from \"react\";\n// import Form from \"react-validation/build/form\";\n// import Input from \"react-validation/build/input\";\n// import CheckButton from \"react-validation/build/button\";\n// import { Segment, Checkbox } from \"semantic-ui-react\";\n// import { isEmail } from \"validator\";\n// import { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\"; // import { clearMessage } from \"../actions/message\";\n// const required = (value) => {\n//   if (!value) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         This field is required!\n//       </div>\n//     );\n//   }\n// };\n// const username = (value) => {\n//   if (!isEmail(value)) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         This is not a valid username.\n//       </div>\n//     );\n//   }\n// };\n// const vname = (value) => {\n//   if (value.length < 3 || value.length > 20) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         The name must be between 3 and 20 characters.\n//       </div>\n//     );\n//   }\n// };\n// const vpassword = (value) => {\n//   if (value.length < 8 || value.length > 40) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         The password must be between 8 and 40 characters.\n//       </div>\n//     );\n//   }\n// };\n// export const roles = {\n//   ADMIN: \"ROLE_ADMIN\",\n//   TEACHER: \"ROLE_TEACHER\",\n//   STUDENT: \"ROLE_STUDENT\",\n// };\n// const MyRolesInput = ({ state, ...props }) => {\n//   console.log(state, props);\n//   return (\n//     <Segment inverted>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Admin\"\n//           checked={state.roles.includes(roles.ADMIN)}\n//           label=\"Admin\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.ADMIN)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.ADMIN].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Teacher\"\n//           checked={state.roles.includes(roles.TEACHER)}\n//           label=\"Teacher\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.TEACHER)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.TEACHER].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Student\"\n//           checked={state.roles.includes(roles.STUDENT)}\n//           label=\"Student\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.STUDENT)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.STUDENT].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//     </Segment>\n//   );\n// };\n// class Register extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleRegister = this.handleRegister.bind(this);\n//     this.onChangeName = this.onChangeName.bind(this);\n//     this.onChangeUsername = this.onChangeUsername.bind(this);\n//     this.onChangePassword = this.onChangePassword.bind(this);\n//     this.state = {\n//       name: \"\",\n//       username: \"\",\n//       password: \"\",\n//       successful: false,\n//     };\n//   }\n//   componentDidMount() {\n//     this.props.dispatch(clearMessage);\n//   }\n//   onChangeName(e) {\n//     this.setState({\n//       name: e.target.value,\n//     });\n//   }\n//   onChangeUsername(e) {\n//     this.setState({\n//       username: e.target.value,\n//     });\n//   }\n//   onChangePassword(e) {\n//     this.setState({\n//       password: e.target.value,\n//     });\n//   }\n//   handleRegister(e) {\n//     e.preventDefault();\n//     this.setState({\n//       successful: false,\n//     });\n//     this.form.validateAll();\n//     if (this.checkBtn.context._errors.length === 0) {\n//       this.props\n//         .dispatch(\n//           register(this.state.name, this.state.username, this.state.password)\n//         )\n//         .then(() => {\n//           this.setState({\n//             successful: true,\n//           });\n//         })\n//         .catch(() => {\n//           this.setState({\n//             successful: false,\n//           });\n//         });\n//     }\n//   }\n//   render() {\n//     const { message } = this.props;\n//     console.log(message);\n//     return (\n//       <div className=\"col-md-12\">\n//         <div className=\"card card-container\">\n//           <img\n//             src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n//             alt=\"profile-img\"\n//             className=\"profile-img-card\"\n//           />\n//           <Form\n//             onSubmit={this.handleRegister}\n//             ref={(c) => {\n//               this.form = c;\n//             }}\n//           >\n//             {!this.state.successful && (\n//               <div>\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"name\">Name</label>\n//                   <Input\n//                     type=\"text\"\n//                     className=\"form-control\"\n//                     name=\"name\"\n//                     value={this.state.name}\n//                     onChange={this.onChangeName}\n//                     validations={[required, vname]}\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"username\">Username</label>\n//                   <Input\n//                     type=\"email\"\n//                     className=\"form-control\"\n//                     name=\"username\"\n//                     value={this.state.username}\n//                     onChange={this.onChangeUsername}\n//                     validations={[required, username]}\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"password\">Password</label>\n//                   <Input\n//                     type=\"password\"\n//                     className=\"form-control\"\n//                     name=\"password\"\n//                     value={this.state.password}\n//                     onChange={this.onChangePassword}\n//                     validations={[required, vpassword]}\n//                   />\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <button className=\"btn btn-primary btn-block\">Sign Up</button>\n//                   <MyRolesInput />\n//                 </div>\n//               </div>\n//             )}\n//             {message && (\n//               <div className=\"form-group\">\n//                 <div\n//                   className={\n//                     this.state.successful\n//                       ? \"alert alert-success\"\n//                       : \"alert alert-danger\"\n//                   }\n//                   role=\"alert\"\n//                 >\n//                   {message}\n//                 </div>\n//               </div>\n//             )}\n//             <CheckButton\n//               style={{ display: \"none\" }}\n//               ref={(c) => {\n//                 this.checkBtn = c;\n//               }}\n//             />\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// function mapStateToProps(state) {\n//   const { message } = state.message;\n//   return {\n//     message,\n//   };\n// }\n// export default connect(mapStateToProps)(Register);\n\nimport { Field, Form, Formik, FormikProps } from \"formik\";\nimport { Button, Form as FormSemantic, Message, Grid, Segment, Checkbox } from \"semantic-ui-react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\"; // import { registerCall } from \"../../api/users.api\";\n\nexport const userConstraints = {\n  PASSWORD_MIN_LENGTH: 8,\n  USERNAME_MAX_LENGTH: 15,\n  PASSWORD_PATTERN: /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/\n};\nexport const roles = {\n  ADMIN: \"ROLE_ADMIN\",\n  TEACHER: \"ROLE_TEACHER\",\n  STUDENT: \"ROLE_STUDENT\"\n};\n\nconst MyUsernameInput = ({\n  field,\n  form,\n  ...props\n}) => {\n  console.log(field, form, props);\n  return /*#__PURE__*/React.createElement(FormSemantic.Input, {\n    fluid: true,\n    label: \"Username\",\n    placeholder: \"Enter username\",\n    error: form.errors.username ? {\n      content: form.errors.username\n    } : props.errors ? props.errors.properties.message : false,\n    value: form.values.username,\n    onChange: e => form.setFieldValue(\"username\", e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 5\n    }\n  });\n};\n\nconst MyPasswordInput = ({\n  field,\n  form,\n  ...props\n}) => {\n  console.log(field, form.errors, props);\n  return /*#__PURE__*/React.createElement(FormSemantic.Input, {\n    fluid: true,\n    label: \"Password\",\n    type: \"password\",\n    placeholder: \"Enter password\",\n    error: form.errors.password ? {\n      content: form.errors.password\n    } : props.errors ? props.errors.properties.message : false,\n    value: form.values.password,\n    onChange: e => form.setFieldValue(\"password\", e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 5\n    }\n  });\n};\n\nconst MyFirstNameInput = ({\n  field,\n  form,\n  ...props\n}) => {\n  console.log(field, form, props);\n  return /*#__PURE__*/React.createElement(FormSemantic.Input, {\n    fluid: true,\n    label: \"First name\",\n    type: \"text\",\n    placeholder: \"e.g: Dimitar\",\n    error: form.errors.firstName ? {\n      content: form.errors.firstName\n    } : props.errors ? props.errors.properties.message : false,\n    value: form.values.firstName,\n    onChange: e => form.setFieldValue(\"firstName\", e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 5\n    }\n  });\n};\n\nfunction validateUsername(value) {\n  let error;\n\n  if (value.length > userConstraints.USERNAME_MAX_LENGTH) {\n    error = `Username max length is: ${userConstraints.USERNAME_MAX_LENGTH}`;\n  }\n\n  return error;\n}\n\nfunction validatePassword(value) {\n  let error;\n\n  if (value.length < userConstraints.PASSWORD_MIN_LENGTH) {\n    error = `Password have to be at least ${userConstraints.PASSWORD_MIN_LENGTH} characters long`;\n  } else if (!value.match(userConstraints.PASSWORD_PATTERN)) {\n    error = `Password have to contain at least one digit and one special character[!,@,#,$,%,^,&,*]`;\n  }\n\n  return error;\n}\n\nconst MyLastNameInput = ({\n  field,\n  form,\n  ...props\n}) => {\n  console.log(field, form, props);\n  return /*#__PURE__*/React.createElement(FormSemantic.Input, {\n    fluid: true,\n    label: \"Last name\",\n    type: \"text\",\n    placeholder: \"e.g: Kolev\",\n    error: form.errors.lastName ? {\n      content: form.errors.lastName\n    } : props.errors ? props.errors.properties.message : false,\n    value: form.values.lastName,\n    onChange: e => form.setFieldValue(\"lastName\", e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 5\n    }\n  });\n};\n\nconst MyRolesInput = ({\n  field,\n  form,\n  ...props\n}) => {\n  console.log(field, form, props);\n  return /*#__PURE__*/React.createElement(Segment, {\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    compact: true,\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    inverted: true,\n    id: \"role-Admin\",\n    checked: form.values.roles.includes(roles.ADMIN),\n    label: \"Admin\",\n    onChange: event => {\n      if (!event.target.checked) {\n        form.setFieldValue(\"roles\", form.values.roles.filter(r => r !== roles.ADMIN));\n      } else {\n        form.setFieldValue(\"roles\", [roles.ADMIN].concat(form.values.roles));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Segment, {\n    compact: true,\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    inverted: true,\n    id: \"role-Teacher\",\n    checked: form.values.roles.includes(roles.TEACHER),\n    label: \"Teacher\",\n    onChange: event => {\n      if (!event.target.checked) {\n        form.setFieldValue(\"roles\", form.values.roles.filter(r => r !== roles.TEACHER));\n      } else {\n        form.setFieldValue(\"roles\", [roles.TEACHER].concat(form.values.roles));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Segment, {\n    compact: true,\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    inverted: true,\n    id: \"role-Student\",\n    checked: form.values.roles.includes(roles.STUDENT),\n    label: \"Student\",\n    onChange: event => {\n      if (!event.target.checked) {\n        form.setFieldValue(\"roles\", form.values.roles.filter(r => r !== roles.STUDENT));\n      } else {\n        form.setFieldValue(\"roles\", [roles.STUDENT].concat(form.values.roles));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const Register = () => {\n  const [errors, setErrors] = useState(null);\n  const [serverErr, setServerErrors] = useState(null);\n  const history = useHistory(); // const dispatch = useDispatch();\n\n  const handleRegister = async data => {\n    try {\n      const response = await register(data.firstName, data.username, data.password);\n      console.log(\"REGISTER SUCCESS: \", response);\n      history.push(\"/auth/login\");\n    } catch (err) {\n      console.log(\"REGISTER ERROR: \", err);\n\n      if (err.errors) {\n        setErrors(err.errors);\n      } else {\n        setServerErrors(err.message);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Segment, {\n    inverted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 5\n    }\n  }, serverErr && /*#__PURE__*/React.createElement(Message, {\n    negative: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Message.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 11\n    }\n  }, serverErr)), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      // Once the username is set wont be able to change\n      id: null,\n      username: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      roles: []\n    },\n    onSubmit: (values, actions) => {\n      handleRegister(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }\n  }, props => {\n    // console.log(props);\n    return /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Form, {\n      style: {\n        width: \"50%\",\n        margin: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormSemantic, {\n      inverted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"firstName\",\n      component: MyFirstNameInput,\n      errors: errors ? errors[\"firstName\"] : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"lastName\",\n      component: MyLastNameInput,\n      errors: errors ? errors[\"lastName\"] : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"username\",\n      component: MyUsernameInput,\n      errors: errors ? errors[\"username\"] : null,\n      validate: validateUsername,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"password\",\n      component: MyPasswordInput,\n      errors: errors ? errors[\"password\"] : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"roles\",\n      component: MyRolesInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 21\n      }\n    }, \"Sing up\")))));\n  }));\n};","map":{"version":3,"sources":["/Users/antony.dobrenov/nodejs_projects/VolleyStats-WEB/frontend/src/components/register.component.js"],"names":["register","Field","Form","Formik","FormikProps","Button","FormSemantic","Message","Grid","Segment","Checkbox","React","axios","useHistory","useState","userConstraints","PASSWORD_MIN_LENGTH","USERNAME_MAX_LENGTH","PASSWORD_PATTERN","roles","ADMIN","TEACHER","STUDENT","MyUsernameInput","field","form","props","console","log","errors","username","content","properties","message","values","e","setFieldValue","target","value","MyPasswordInput","password","MyFirstNameInput","firstName","validateUsername","error","length","validatePassword","match","MyLastNameInput","lastName","MyRolesInput","includes","event","checked","filter","r","concat","Register","setErrors","serverErr","setServerErrors","history","handleRegister","data","response","push","err","id","actions","color","width","margin"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\n// import Form from \"react-validation/build/form\";\n// import Input from \"react-validation/build/input\";\n// import CheckButton from \"react-validation/build/button\";\n// import { Segment, Checkbox } from \"semantic-ui-react\";\n\n// import { isEmail } from \"validator\";\n\n// import { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\";\n// import { clearMessage } from \"../actions/message\";\n\n// const required = (value) => {\n//   if (!value) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         This field is required!\n//       </div>\n//     );\n//   }\n// };\n\n// const username = (value) => {\n//   if (!isEmail(value)) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         This is not a valid username.\n//       </div>\n//     );\n//   }\n// };\n\n// const vname = (value) => {\n//   if (value.length < 3 || value.length > 20) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         The name must be between 3 and 20 characters.\n//       </div>\n//     );\n//   }\n// };\n\n// const vpassword = (value) => {\n//   if (value.length < 8 || value.length > 40) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         The password must be between 8 and 40 characters.\n//       </div>\n//     );\n//   }\n// };\n\n// export const roles = {\n//   ADMIN: \"ROLE_ADMIN\",\n//   TEACHER: \"ROLE_TEACHER\",\n//   STUDENT: \"ROLE_STUDENT\",\n// };\n\n// const MyRolesInput = ({ state, ...props }) => {\n//   console.log(state, props);\n//   return (\n//     <Segment inverted>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Admin\"\n//           checked={state.roles.includes(roles.ADMIN)}\n//           label=\"Admin\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.ADMIN)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.ADMIN].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Teacher\"\n//           checked={state.roles.includes(roles.TEACHER)}\n//           label=\"Teacher\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.TEACHER)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.TEACHER].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//       <Segment compact inverted>\n//         <Checkbox\n//           inverted\n//           id=\"role-Student\"\n//           checked={state.roles.includes(roles.STUDENT)}\n//           label=\"Student\"\n//           onChange={(event) => {\n//             if (!event.target.checked) {\n//               state.setFieldValue(\n//                 \"roles\",\n//                 state.roles.filter((r) => r !== roles.STUDENT)\n//               );\n//             } else {\n//               state.setFieldValue(\"roles\", [roles.STUDENT].concat(state.roles));\n//             }\n//           }}\n//         />\n//       </Segment>\n//     </Segment>\n//   );\n// };\n\n// class Register extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleRegister = this.handleRegister.bind(this);\n//     this.onChangeName = this.onChangeName.bind(this);\n//     this.onChangeUsername = this.onChangeUsername.bind(this);\n//     this.onChangePassword = this.onChangePassword.bind(this);\n\n//     this.state = {\n//       name: \"\",\n//       username: \"\",\n//       password: \"\",\n//       successful: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.props.dispatch(clearMessage);\n//   }\n\n//   onChangeName(e) {\n//     this.setState({\n//       name: e.target.value,\n//     });\n//   }\n\n//   onChangeUsername(e) {\n//     this.setState({\n//       username: e.target.value,\n//     });\n//   }\n\n//   onChangePassword(e) {\n//     this.setState({\n//       password: e.target.value,\n//     });\n//   }\n\n//   handleRegister(e) {\n//     e.preventDefault();\n\n//     this.setState({\n//       successful: false,\n//     });\n\n//     this.form.validateAll();\n\n//     if (this.checkBtn.context._errors.length === 0) {\n//       this.props\n//         .dispatch(\n//           register(this.state.name, this.state.username, this.state.password)\n//         )\n//         .then(() => {\n//           this.setState({\n//             successful: true,\n//           });\n//         })\n//         .catch(() => {\n//           this.setState({\n//             successful: false,\n//           });\n//         });\n//     }\n//   }\n\n//   render() {\n//     const { message } = this.props;\n//     console.log(message);\n\n//     return (\n//       <div className=\"col-md-12\">\n//         <div className=\"card card-container\">\n//           <img\n//             src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n//             alt=\"profile-img\"\n//             className=\"profile-img-card\"\n//           />\n\n//           <Form\n//             onSubmit={this.handleRegister}\n//             ref={(c) => {\n//               this.form = c;\n//             }}\n//           >\n//             {!this.state.successful && (\n//               <div>\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"name\">Name</label>\n//                   <Input\n//                     type=\"text\"\n//                     className=\"form-control\"\n//                     name=\"name\"\n//                     value={this.state.name}\n//                     onChange={this.onChangeName}\n//                     validations={[required, vname]}\n//                   />\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"username\">Username</label>\n//                   <Input\n//                     type=\"email\"\n//                     className=\"form-control\"\n//                     name=\"username\"\n//                     value={this.state.username}\n//                     onChange={this.onChangeUsername}\n//                     validations={[required, username]}\n//                   />\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"password\">Password</label>\n//                   <Input\n//                     type=\"password\"\n//                     className=\"form-control\"\n//                     name=\"password\"\n//                     value={this.state.password}\n//                     onChange={this.onChangePassword}\n//                     validations={[required, vpassword]}\n//                   />\n//                 </div>\n\n//                 <div className=\"form-group\">\n//                   <button className=\"btn btn-primary btn-block\">Sign Up</button>\n//                   <MyRolesInput />\n//                 </div>\n//               </div>\n//             )}\n\n//             {message && (\n//               <div className=\"form-group\">\n//                 <div\n//                   className={\n//                     this.state.successful\n//                       ? \"alert alert-success\"\n//                       : \"alert alert-danger\"\n//                   }\n//                   role=\"alert\"\n//                 >\n//                   {message}\n//                 </div>\n//               </div>\n//             )}\n//             <CheckButton\n//               style={{ display: \"none\" }}\n//               ref={(c) => {\n//                 this.checkBtn = c;\n//               }}\n//             />\n//           </Form>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function mapStateToProps(state) {\n//   const { message } = state.message;\n//   return {\n//     message,\n//   };\n// }\n\n// export default connect(mapStateToProps)(Register);\n\nimport { Field, Form, Formik, FormikProps } from \"formik\";\nimport {\n  Button,\n  Form as FormSemantic,\n  Message,\n  Grid,\n  Segment,\n  Checkbox,\n} from \"semantic-ui-react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\n// import { registerCall } from \"../../api/users.api\";\n\nexport const userConstraints = {\n  PASSWORD_MIN_LENGTH: 8,\n  USERNAME_MAX_LENGTH: 15,\n  PASSWORD_PATTERN: /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/,\n};\n\nexport const roles = {\n  ADMIN: \"ROLE_ADMIN\",\n  TEACHER: \"ROLE_TEACHER\",\n  STUDENT: \"ROLE_STUDENT\",\n};\n\nconst MyUsernameInput = ({ field, form, ...props }) => {\n  console.log(field, form, props);\n  return (\n    <FormSemantic.Input\n      fluid\n      label=\"Username\"\n      placeholder={\"Enter username\"}\n      error={\n        form.errors.username\n          ? { content: form.errors.username }\n          : props.errors\n          ? props.errors.properties.message\n          : false\n      }\n      value={form.values.username}\n      onChange={(e) => form.setFieldValue(\"username\", e.target.value)}\n    />\n  );\n};\n\nconst MyPasswordInput = ({ field, form, ...props }) => {\n  console.log(field, form.errors, props);\n  return (\n    <FormSemantic.Input\n      fluid\n      label=\"Password\"\n      type={\"password\"}\n      placeholder={\"Enter password\"}\n      error={\n        form.errors.password\n          ? { content: form.errors.password }\n          : props.errors\n          ? props.errors.properties.message\n          : false\n      }\n      value={form.values.password}\n      onChange={(e) => form.setFieldValue(\"password\", e.target.value)}\n    />\n  );\n};\n\nconst MyFirstNameInput = ({ field, form, ...props }) => {\n  console.log(field, form, props);\n  return (\n    <FormSemantic.Input\n      fluid\n      label=\"First name\"\n      type={\"text\"}\n      placeholder={\"e.g: Dimitar\"}\n      error={\n        form.errors.firstName\n          ? { content: form.errors.firstName }\n          : props.errors\n          ? props.errors.properties.message\n          : false\n      }\n      value={form.values.firstName}\n      onChange={(e) => form.setFieldValue(\"firstName\", e.target.value)}\n    />\n  );\n};\n\nfunction validateUsername(value) {\n  let error;\n  if (value.length > userConstraints.USERNAME_MAX_LENGTH) {\n    error = `Username max length is: ${userConstraints.USERNAME_MAX_LENGTH}`;\n  }\n  return error;\n}\n\nfunction validatePassword(value) {\n  let error;\n  if (value.length < userConstraints.PASSWORD_MIN_LENGTH) {\n    error = `Password have to be at least ${userConstraints.PASSWORD_MIN_LENGTH} characters long`;\n  } else if (!value.match(userConstraints.PASSWORD_PATTERN)) {\n    error = `Password have to contain at least one digit and one special character[!,@,#,$,%,^,&,*]`;\n  }\n  return error;\n}\n\nconst MyLastNameInput = ({ field, form, ...props }) => {\n  console.log(field, form, props);\n  return (\n    <FormSemantic.Input\n      fluid\n      label=\"Last name\"\n      type={\"text\"}\n      placeholder={\"e.g: Kolev\"}\n      error={\n        form.errors.lastName\n          ? { content: form.errors.lastName }\n          : props.errors\n          ? props.errors.properties.message\n          : false\n      }\n      value={form.values.lastName}\n      onChange={(e) => form.setFieldValue(\"lastName\", e.target.value)}\n    />\n  );\n};\n\nconst MyRolesInput = ({ field, form, ...props }) => {\n  console.log(field, form, props);\n  return (\n    <Segment inverted>\n      <Segment compact inverted>\n        <Checkbox\n          inverted\n          id=\"role-Admin\"\n          checked={form.values.roles.includes(roles.ADMIN)}\n          label=\"Admin\"\n          onChange={(event) => {\n            if (!event.target.checked) {\n              form.setFieldValue(\n                \"roles\",\n                form.values.roles.filter((r) => r !== roles.ADMIN)\n              );\n            } else {\n              form.setFieldValue(\n                \"roles\",\n                [roles.ADMIN].concat(form.values.roles)\n              );\n            }\n          }}\n        />\n      </Segment>\n      <Segment compact inverted>\n        <Checkbox\n          inverted\n          id=\"role-Teacher\"\n          checked={form.values.roles.includes(roles.TEACHER)}\n          label=\"Teacher\"\n          onChange={(event) => {\n            if (!event.target.checked) {\n              form.setFieldValue(\n                \"roles\",\n                form.values.roles.filter((r) => r !== roles.TEACHER)\n              );\n            } else {\n              form.setFieldValue(\n                \"roles\",\n                [roles.TEACHER].concat(form.values.roles)\n              );\n            }\n          }}\n        />\n      </Segment>\n      <Segment compact inverted>\n        <Checkbox\n          inverted\n          id=\"role-Student\"\n          checked={form.values.roles.includes(roles.STUDENT)}\n          label=\"Student\"\n          onChange={(event) => {\n            if (!event.target.checked) {\n              form.setFieldValue(\n                \"roles\",\n                form.values.roles.filter((r) => r !== roles.STUDENT)\n              );\n            } else {\n              form.setFieldValue(\n                \"roles\",\n                [roles.STUDENT].concat(form.values.roles)\n              );\n            }\n          }}\n        />\n      </Segment>\n    </Segment>\n  );\n};\n\nexport const Register = () => {\n  const [errors, setErrors] = useState(null);\n  const [serverErr, setServerErrors] = useState(null);\n\n  const history = useHistory();\n  // const dispatch = useDispatch();\n\n  const handleRegister = async (data) => {\n    try {\n      const response = await register(\n        data.firstName,\n        data.username,\n        data.password\n      );\n      console.log(\"REGISTER SUCCESS: \", response);\n      history.push(\"/auth/login\");\n    } catch (err) {\n      console.log(\"REGISTER ERROR: \", err);\n      if (err.errors) {\n        setErrors(err.errors);\n      } else {\n        setServerErrors(err.message);\n      }\n    }\n  };\n\n  return (\n    <Segment inverted>\n      {serverErr && (\n        <Message negative>\n          <Message.Header>{serverErr}</Message.Header>\n        </Message>\n      )}\n      <Formik\n        initialValues={{\n          // Once the username is set wont be able to change\n          id: null,\n          username: \"\",\n          password: \"\",\n          firstName: \"\",\n          lastName: \"\",\n          roles: [],\n        }}\n        onSubmit={(values, actions) => {\n          handleRegister(values);\n        }}\n      >\n        {(props) => {\n          // console.log(props);\n          return (\n            <Grid textAlign=\"center\">\n              <Grid.Column>\n                <h1 style={{ color: \"white\" }}>Register</h1>\n                <Form\n                  style={{\n                    width: \"50%\",\n                    margin: \"auto\",\n                  }}\n                >\n                  <FormSemantic inverted>\n                    <Field\n                      name={\"firstName\"}\n                      component={MyFirstNameInput}\n                      errors={errors ? errors[\"firstName\"] : null}\n                    />\n                    <Field\n                      name={\"lastName\"}\n                      component={MyLastNameInput}\n                      errors={errors ? errors[\"lastName\"] : null}\n                    />\n                    <Field\n                      name={\"username\"}\n                      component={MyUsernameInput}\n                      errors={errors ? errors[\"username\"] : null}\n                      validate={validateUsername}\n                    />\n                    <Field\n                      name={\"password\"}\n                      component={MyPasswordInput}\n                      errors={errors ? errors[\"password\"] : null}\n                    />\n                    <Field name={\"roles\"} component={MyRolesInput} />\n                    <Button type={\"submit\"} color={\"blue\"}>\n                      Sing up\n                    </Button>\n                  </FormSemantic>\n                </Form>\n              </Grid.Column>\n            </Grid>\n          );\n        }}\n      </Formik>\n    </Segment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}